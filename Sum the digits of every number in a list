Q. Sum the digits of every number in a list.

Constraints
•	The input variable numbers is a list of integers.
•	The integers in the list can be positive or negative.
•	The integers in the list can have multiple digits.
•	The length of the list can be any positive integer.
•	The integers in the list can be within the range of the integer data type.

Test Case #1
Input: [12345, 67890, -12345, -67890]
Output: [15, 30, 15, 30]
Description: This test case includes positive and negative multi-digit integers to test the function"s ability to correctly handle 
negative numbers and sum their digits irrespective of the sign.

Test Case #2
Input: [0, -111, 2222, -33333, 444444]
Output: [0, 3, 8, 15, 24]
Description: The function is tested with leading zero, negative numbers, and sequences of the same digit to verify that digit summation
is handled consistently across various simple and repetitive patterns.

Test Case #3
Input: [-1001, 505, -202, 99999, 123456789]
Output: [2, 10, 4, 45, 45]
Description: This case examines the function with complex numbers having mixed digits and multiple patterns, including a mix of negative
and large numbers, to challenge the algorithm""s ability to process diverse digits correctly.

SOLUTION

import re
def SumItems(lst):
    result=[]
    for i in lst:
        result.append(SumNumber(i))
    return result
def SumNumber(num,sum=0):
    s=re.sub(r'-','',str(num))
    if len(s)==0:
        return sum
    else :
        sum+=int(s[-1::])
        return SumNumber(s[:-1],sum)
        
lst=[0, -111, 2222, -33333, 444444]
print(SumItems(lst))
    

